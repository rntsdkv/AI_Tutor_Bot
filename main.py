import configparser
import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, KeyboardButtonPollType
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.types import CallbackQuery
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Any, Awaitable, Callable, Dict
from aiogram import BaseMiddleware
from aiogram.types import TelegramObject
from html import escape
import asyncio
import aiosqlite
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import requests
import uuid
import datetime
from langchain_core.messages import HumanMessage, SystemMessage
from langchain_gigachat.chat_models import GigaChat
from random import randint

config = configparser.ConfigParser()
config.read("config.ini")

TG_TOKEN = config["Telegram"]["token"]
GC_TOKEN = config["GigaChat"]["token"]

llm = GigaChat(
    credentials=GC_TOKEN,
    scope="GIGACHAT_API_PERS",
    model="GigaChat",
    verify_ssl_certs=False
)

LANGUAGES = {"en": "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
             "fr": "üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π",
             "it": "üáÆüáπ –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π",
             "gr": "üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π",
             "sp": "üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π"}

LEVELS = {"0": "–ù–æ–≤–∏—á–æ–∫ A0",
          "A": "–ù–∞—á–∞–ª—å–Ω—ã–π A1-A2",
          "B": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π B1-B2",
          "C": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π C1"}

logging.basicConfig(force=True, level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

bot = Bot(token=TG_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())


class Form(StatesGroup):
    name = State()
    choose_language = State()
    choose_level = State()
    reminder_time_enter = State()
    study_translate = State()


class Keyboard:
    menu_button_1 = InlineKeyboardButton(text="üî§ –ò–∑—É—á–∞—Ç—å —Å–ª–æ–≤–∞",
                                         callback_data="study_words")
    menu_button_2 = InlineKeyboardButton(text="‚ÑπÔ∏è –ò–∑—É—á–∞—Ç—å —Ç–µ–º—ã",
                                         callback_data="study_topics")
    menu_button_3 = InlineKeyboardButton(text="‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                                         callback_data="set_reminder")
    menu_keyboard = InlineKeyboardMarkup(inline_keyboard=[[menu_button_1, menu_button_2], [menu_button_3]])


class SomeMiddleware(BaseMiddleware):
    async def __call__(
            self,
            handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
            event: TelegramObject,
            data: Dict[str, Any]
    ) -> Any:
        message: Message = data['event_update'].message
        chat_id = message.chat.id
        state: FSMContext = data.get('state')
        current_state = await state.get_state()

        async with aiosqlite.connect('bot.db') as db:
            if message.text[0] == '/':
                action = "use_command"
            else:
                action = "send_message"
                await db.execute("INSERT INTO messages (user_id, message, state, datetime) VALUES (?, ?, ?, ?)",
                                 (message.from_user.id, message.text, str(current_state), message.date))
            await db.execute("INSERT INTO logs (user_id, action, text, datetime) VALUES (?, ?, ?, ?)",
                             (message.from_user.id, action, message.text, message.date))

            await db.commit()

        async with aiosqlite.connect('bot.db') as db:
            cursor = await db.execute("SELECT * FROM users")
            rows = await cursor.fetchall()
            print('rows %s' % rows)

        if message.text != '/start' and current_state != Form.name:
            async with aiosqlite.connect('bot.db') as db:
                async with db.execute("SELECT id FROM users WHERE id = ?", (chat_id,)) as cursor:
                    if await cursor.fetchone() is None:
                        await bot.send_message(chat_id=chat_id,
                                               text='–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É '
                                                    '/start')
                        return
        result = await handler(event, data)
        return result


@dp.message(CommandStart(), State(None))
async def cmd_start(message: Message, state: FSMContext):
    async with aiosqlite.connect('bot.db') as db:
        async with db.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,)) as cursor:
            if await cursor.fetchone() is None:
                await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–∏ "
                                     f"—Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è:")
                await state.update_data(lastfirstname=f"{message.from_user.last_name} {message.from_user.first_name}")
                await state.set_state(Form.name)
                return
        await bot.send_message(chat_id=message.from_user.id,
                               text="–ú–µ–Ω—é",
                               reply_markup=Keyboard.menu_keyboard)


@dp.message(Form.name)
async def name_enter(message: Message, state: FSMContext):
    if len(message.text.split()) != 2:
        await message.answer(
            f"–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è, –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è.")
        return
    last_name, first_name = message.text.split()
    async with aiosqlite.connect('bot.db') as db:
        async with db.execute("SELECT id FROM users WHERE id = ?", (message.from_user.id,)) as cursor:
            await cursor.execute('INSERT INTO users (id, last_name, first_name) VALUES (?, ?, ?)',
                                 (message.from_user.id, last_name, first_name))
            await db.commit()
    await state.clear()

    button_1 = KeyboardButton(text=LANGUAGES['en'])
    button_2 = KeyboardButton(text=LANGUAGES['fr'])
    button_3 = KeyboardButton(text=LANGUAGES['it'])
    button_4 = KeyboardButton(text=LANGUAGES['gr'])
    button_5 = KeyboardButton(text=LANGUAGES['sp'])
    button_6 = KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")
    keyboard = ReplyKeyboardMarkup(keyboard=[[button_1, button_2, button_3], [button_4, button_5], [button_6]],
                                   resize_keyboard=True)

    await state.set_state(Form.choose_language)
    await message.answer(text=f"–î–∞–Ω–Ω—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n"
                              f"–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
                         reply_markup=keyboard)


@dp.message(Command("help"))
async def cmd_help(message: Message):
    async with aiosqlite.connect('bot.db') as db:
        cursor = await db.execute("SELECT * FROM logs")
        rows = await cursor.fetchall()
        print('rows %s' % rows)
    await message.answer("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
                         "/help ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥\n"
                         "/choose ‚Äì –í—ã–±–æ—Ä –∏–ª–∏ —Å–º–µ–Ω–∞ –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞\n"
                         "/set_time ‚Äì –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å–ª–æ–≤–æ–º –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ "
                         "—è–∑—ã–∫–∞)")


@dp.message(Command("choose"))
async def cmd_choose(message: Message, state: FSMContext):
    button_1 = KeyboardButton(text=LANGUAGES['en'])
    button_2 = KeyboardButton(text=LANGUAGES['fr'])
    button_3 = KeyboardButton(text=LANGUAGES['it'])
    button_4 = KeyboardButton(text=LANGUAGES['gr'])
    button_5 = KeyboardButton(text=LANGUAGES['sp'])
    button_6 = KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")
    keyboard = ReplyKeyboardMarkup(keyboard=[[button_1, button_2, button_3], [button_4, button_5], [button_6]],
                                   resize_keyboard=True)
    async with aiosqlite.connect('bot.db') as db:
        cursor = await db.execute("SELECT current_language FROM users WHERE id = (?)", (message.from_user.id,))
        language = await cursor.fetchone()
        language = language[0]

    if language == "":
        await message.answer(text="–í—ã–±–µ—Ä–µ—Ç–µ —è–∑—ã–∫ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
                             reply_markup=keyboard)
    else:
        await message.answer(text="‚ùóÔ∏è–£ –≤–∞—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω —è–∑—ã–∫. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω. \n\n–ï—Å–ª–∏ –≤—ã "
                                  "—Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É  ‚ùå –û—Ç–º–µ–Ω–∞. –ò–Ω–∞—á–µ "
                                  "–≤—ã–±–µ—Ä–µ—Ç–µ —è–∑—ã–∫ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
                             reply_markup=keyboard)
    await state.set_state(Form.choose_language)


@dp.message(Form.choose_language)
async def choose_language(message: Message, state: FSMContext):
    if message.text not in LANGUAGES.values():
        if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
            await message.answer(text="–•–æ—Ä–æ—à–æ! –û—Ç–º–µ–Ω—è—é –≤—ã–±–æ—Ä —è–∑—ã–∫–∞.",
                                 reply_markup=ReplyKeyboardRemove())
            await state.clear()
            return

        await message.answer(text="–¢–∞–∫–æ–π —è–∑—ã–∫ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ")
        return
    for code, language in LANGUAGES.items():
        if language == message.text:
            async with aiosqlite.connect('bot.db') as db:
                await db.execute('UPDATE users SET (current_language) = (?) WHERE id = (?)',
                                 (code, message.from_user.id))
                await db.execute('DELETE FROM words WHERE user_id = (?)',
                                 (message.from_user.id,))
                await db.commit()

            button_1 = KeyboardButton(text="–ù–æ–≤–∏—á–æ–∫ A0")
            button_2 = KeyboardButton(text="–ù–∞—á–∞–ª—å–Ω—ã–π A1-A2")
            button_3 = KeyboardButton(text="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π B1-B2")
            button_4 = KeyboardButton(text="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π C1")
            keyboard = ReplyKeyboardMarkup(keyboard=[[button_1, button_2], [button_3, button_4]],
                                           resize_keyboard=True)
            await message.answer(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {message.text} —è–∑—ã–∫.\n\n–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å "
                                      f"—É—Ä–æ–≤–µ–Ω—å —è–∑—ã–∫–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
                                 reply_markup=keyboard)
            await state.set_state(Form.choose_level)


@dp.message(Form.choose_level)
async def choose_language(message: Message, state: FSMContext):
    for code, level in LEVELS.items():
        if level == message.text:
            async with aiosqlite.connect('bot.db') as db:
                await db.execute('UPDATE users SET (current_level) = (?) WHERE id = (?)',
                                 (code, message.from_user.id))
                await db.commit()
                await message.answer(
                    text="–•–æ—Ä–æ—à–æ, –∑–∞–ø–∏—Å–∞–ª –≤–∞—à —É—Ä–æ–≤–µ–Ω—å. –ë—É–¥—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–º—ã –∏ —Å–ª–æ–≤–∞ –∏–º–µ–Ω–Ω–æ –ø–æ –≤–∞—à–µ–º—É "
                         "—É—Ä–æ–≤–Ω—é!",
                    reply_markup=ReplyKeyboardRemove())
                await state.clear()
                return
    await message.answer(text="–í—ã–±–∏—Ä–µ—Ç–µ —á—Ç–æ-—Ç–æ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.")


@dp.message(Command("menu"))
async def cmd_menu(message: Message):
    await message.answer(text="–ú–µ–Ω—é",
                         reply_markup=Keyboard.menu_keyboard)


@dp.callback_query(F.data == "study_words")
async def callback_study_words(callback: CallbackQuery, state: FSMContext):
    async with aiosqlite.connect('bot.db') as db:
        async with db.execute("SELECT * FROM words WHERE user_id = (?) and repeat > 0",
                              (callback.from_user.id,)) as cursor:
            results = await cursor.fetchall()
            print(results)
            if len(results) > 0 and randint(1, 10) % 2 == 0:
                foreign_word = results[randint(0, len(results) - 1)][1]
                print(foreign_word)
                await state.update_data(word=foreign_word)
                await state.set_state(Form.study_translate)
                exit_button = InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
                                                   callback_data="exit")
                await bot.send_message(chat_id=callback.from_user.id,
                                       text=f"–î–∞–≤–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏–º —Å–ª–æ–≤–æ {foreign_word}\n"
                                            f"–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥",
                                       reply_markup=InlineKeyboardMarkup(inline_keyboard=[[exit_button]]))
                await callback.answer()
                return

        async with db.execute("SELECT * FROM users WHERE id = (?)", (callback.from_user.id,)) as cursor:
            async for row in cursor:
                user_lang, user_lvl = LANGUAGES[row[3]], LEVELS[row[4]]

                norm = True
                while norm:
                    try:
                        messages = [SystemMessage(
                            content=f"–¢—ã –±–æ—Ç-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ {user_lang}, —Å —Ç–æ–±–æ–π –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ä–æ–≤–Ω—è "
                                    f"{user_lvl}, —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑—É—á–∞—Ç—å —è–∑—ã–∫."
                        ), HumanMessage(content='–ü—Ä–µ–¥–ª–æ–∂–∏ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: "(—Å–ª–æ–≤–æ, –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞)". '
                                                '–ù–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ.')]
                        res = llm.invoke(messages)
                        foreign_word, russian_word = res.content.replace('(', '').replace(')', '').split(', ')
                        messages.append(res)
                        norm = False
                    except:
                        print("–û—à–∏–±–∫–∞: –≥–ª—É–ø–∞—è –Ω–µ–π—Ä–æ–Ω–∫–∞")

                await bot.send_message(chat_id=callback.from_user.id,
                                       text=f'–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è ‚Äì {foreign_word}\n'
                                            f'–û–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç "{russian_word}"')
                await db.execute("INSERT INTO words (user_id, word, translation, repeat) VALUES (?, ?, ?, ?)",
                                 (callback.from_user.id, foreign_word, russian_word, 2))
                await db.commit()
                await callback.answer()


@dp.message(Form.study_translate)
async def study_translate(message: Message, state: FSMContext):
    foreign_word = await state.get_data()
    foreign_word = foreign_word['word']
    messages = [HumanMessage(content=f"–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å: —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ {foreign_word} —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º {message.text}. "
                                     f"–ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –î–∞ –∏–ª–∏ –ù–µ—Ç.")]
    res = llm.invoke(messages)
    if res.content.lower() == "–¥–∞":
        await message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        async with aiosqlite.connect('bot.db') as db:
            async with db.execute("SELECT * FROM words WHERE user_id = (?) and word = (?)",
                                  (message.from_user.id, foreign_word)) as cursor:
                async for row in cursor:
                    repeat = row[3]
                    await db.execute("UPDATE words SET repeat = (?) WHERE user_id = (?) and word = (?)",
                                     (repeat - 1, message.from_user.id, foreign_word))
                    await db.commit()
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É")

    await state.clear()


@dp.callback_query(F.data == "exit")
async def exit_callback(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await bot.send_message(chat_id=callback.from_user.id,
                           text="–ú–µ–Ω—é",
                           reply_markup=Keyboard.menu_keyboard)
    await callback.answer()


@dp.callback_query(F.data == "study_topics")
async def study_topics(callback: CallbackQuery):
    async with aiosqlite.connect('bot.db') as db:
        async with db.execute("SELECT * FROM users WHERE id = (?)", (callback.from_user.id,)) as cursor:
            async for row in cursor:
                user_lang, user_lvl = LANGUAGES[row[3]], LEVELS[row[4]]
                messages = [SystemMessage(content=f"–¢—ã –±–æ—Ç-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ {user_lang}, —Å —Ç–æ–±–æ–π –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "
                                                  f"—É—Ä–æ–≤–Ω—è {user_lvl}, —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑—É—á–∞—Ç—å —è–∑—ã–∫."),
                            HumanMessage(content=f"–ù—É–∂–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –ª—é–±—É—é —Ç–µ–º—É –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ")]
                res = llm.invoke(messages)
                await bot.send_message(chat_id=callback.from_user.id,
                                       text=res.content)
                await callback.answer()


@dp.message(Command("on"))
async def cmd_on(message: Message, state: FSMContext):
    async with aiosqlite.connect('bot.db') as db:
        user_language = await db.execute('SELECT current_language FROM users WHERE id = (?) AND current_language <> ""',
                                         (message.from_user.id,))
        user_language = await user_language.fetchone()
        if user_language is None:
            await message.answer(text="–í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞\n\n"
                                      "–ü–æ–¥—Å–∫–∞–∑–∫–∞: /choose")
            return
        await message.answer("–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —á–∞—Å, –≤ –∫–æ—Ç–æ—Ä—ã–π —è –±—É–¥—É —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å.\n\n"
                             "–ù–∞–ø—Ä–∏–º–µ—Ä: 13\n"
                             "–¢–æ–≥–¥–∞ —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 13.00 –ø–æ –ú–°–ö\n"
                             "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –û—Ç–º–µ–Ω–∞")
        await state.set_state(Form.reminder_time_enter)


@dp.callback_query(F.data == "set_reminder")
async def callback_set_reminder(callback: CallbackQuery, state: FSMContext):
    async with aiosqlite.connect('bot.db') as db:
        user_language = await db.execute('SELECT current_language FROM users WHERE id = (?) AND current_language <> ""',
                                         (callback.from_user.id,))
        user_language = await user_language.fetchone()
        if user_language is None:
            await bot.send_message(chat_id=callback.from_user.id,
                                   text="–í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞\n\n"
                                        "–ü–æ–¥—Å–∫–∞–∑–∫–∞: /choose")
            await callback.answer()
            return
        await bot.send_message(chat_id=callback.from_user.id,
                               text="–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ —á–∞—Å, –≤ –∫–æ—Ç–æ—Ä—ã–π —è –±—É–¥—É —Ç–µ–±–µ "
                                    "–ø–∏—Å–∞—Ç—å.\n\n"
                                    "–ù–∞–ø—Ä–∏–º–µ—Ä: 13\n"
                                    "–¢–æ–≥–¥–∞ —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 13.00 –ø–æ –ú–°–ö\n"
                                    "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –û—Ç–º–µ–Ω–∞")
        await callback.answer()
        await state.set_state(Form.reminder_time_enter)


@dp.message(Form.reminder_time_enter)
async def time_enter(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–•–æ—Ä–æ—à–æ, –≤–µ—Ä–Ω—É–ª –≤ –º–µ–Ω—é.")
        return

    try:
        number = int(message.text)
    except:
        number = 100

    if number < 0 or number > 23:
        await message.answer("–í–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    async with aiosqlite.connect('bot.db') as db:
        await db.execute('UPDATE users SET (reminder) = (?) WHERE id = (?)',
                         (number, message.from_user.id))
        await db.commit()

    await message.answer(f"‚è∞ –•–æ—Ä–æ—à–æ! –ë—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –≤ {number} —á–∞—Å–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n\n"
                         f"–î–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /off")
    await bot.send_message(chat_id=message.from_user.id,
                           text="–ú–µ–Ω—é",
                           reply_markup=Keyboard.menu_keyboard)
    await state.clear()


@dp.message(Command("off"))
async def cmd_off(message: Message):
    async with aiosqlite.connect('bot.db') as db:
        await db.execute('UPDATE users SET reminder = null WHERE id = (?)',
                         (message.from_user.id,))
        await db.commit()
    await message.answer("–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")


@dp.message(State(None))
async def prtext(message: Message):
    async with aiosqlite.connect('bot.db') as db:
        async with db.execute("SELECT * FROM users WHERE id = (?)", (message.from_user.id,)) as cursor:
            async for row in cursor:
                user_lang, user_lvl = LANGUAGES[row[3]], LEVELS[row[4]]
                messages = [SystemMessage(content=f"–¢—ã –±–æ—Ç-—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ {user_lang}, —Å —Ç–æ–±–æ–π –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "
                                                  f"—É—Ä–æ–≤–Ω—è {user_lvl}, —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑—É—á–∞—Ç—å —è–∑—ã–∫. "
                                                  f"–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –∏–∑—É—á–µ–Ω–∏–µ–º —è–∑—ã–∫–∞, —Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å "
                                                  f"–Ω–∏—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ ‚Äì —ç—Ç–æ –≤–∞–∂–Ω–æ. –¢–µ–±–µ –Ω–µ–ª—å–∑—è —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å "
                                                  f"–Ω–∞ –¥—Ä—É–≥–∏–µ —Ç–µ–º—ã."),
                            HumanMessage(content=message.text)]
                res = llm.invoke(messages)
                await bot.send_message(chat_id=message.from_user.id,
                                       text=res.content)


async def start_bot():
    commands = [BotCommand(command='menu', description='–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é'),
                BotCommand(command='choose', description='–í—ã–±–æ—Ä –∏–ª–∏ —Å–º–µ–Ω–∞ –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞'),
                BotCommand(command='on', description='–í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è'),
                BotCommand(command='off', description='–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'),
                BotCommand(command='help', description='–ü–æ–¥—Å–∫–∞–∑–∫–∞ —Å–æ –≤—Å–µ–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏')]
    await bot.set_my_commands(commands, BotCommandScopeDefault())


async def start_db():
    async with aiosqlite.connect('bot.db') as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER,
                last_name TEXT,
                first_name TEXT,
                current_language TEXT,
                current_level TEXT,
                reminder INTEGER
            )
        ''')
        await db.commit()

        await db.execute('''
            CREATE TABLE IF NOT EXISTS logs (
                user_id INTEGER,
                action TEXT,
                text TEXT,
                datetime TEXT
            )
        ''')

        await db.execute('''
            CREATE TABLE IF NOT EXISTS words (
                user_id INTEGER,
                word TEXT,
                translation TEXT,
                repeat INTEGER
            )
        ''')
        await db.commit()


async def send_msg(dp):
    hours = datetime.datetime.now().hour

    async with aiosqlite.connect('bot.db') as db:
        if hours == 0:
            async with db.execute("SELECT * FROM users WHERE reminder IS NOT NULL AND reminder > 24") as cursor:
                async for row in cursor:
                    await db.execute("UPDATE users SET (reminder) = (?) WHERE id = (?)", (row[5] // 100, row[0]))

        async with db.execute("SELECT * FROM users WHERE reminder IS NOT NULL AND reminder < 25") as cursor:
            async for row in cursor:
                user_time = row[5]
                if user_time == hours:
                    await bot.send_message(chat_id=row[0], text='‚è∞ –ü–æ—Ä–∞ –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞')
                    await db.execute("UPDATE users SET (reminder) = (?) WHERE id = (?)", (user_time * 100, row[0]))
        await db.commit()


async def main():
    scheduler = AsyncIOScheduler(timezone='Europe/Moscow')
    job = scheduler.add_job(send_msg, 'interval', seconds=10, args=(dp,))
    scheduler.start()
    dp.message.outer_middleware(SomeMiddleware())
    dp.startup.register(start_bot)
    dp.startup.register(start_db)
    try:
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        scheduler.remove_job(job.id)
        await bot.session.close()
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


asyncio.run(main())
